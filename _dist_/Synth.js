import './Synth.css.proxy.js';
/* src/Synth.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "../web_modules/svelte/internal.js";

import * as Tone from "../web_modules/tone.js";
import { createEventDispatcher, onMount } from "../web_modules/svelte.js";

function create_fragment(ctx) {
	let button0;
	let t1;
	let button1;
	let t3;
	let div0;
	let t5;
	let div1;
	let t6;
	let mounted;
	let dispose;

	return {
		c() {
			button0 = element("button");
			button0.textContent = "Play";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Stop";
			t3 = space();
			div0 = element("div");
			div0.textContent = "Synth";
			t5 = space();
			div1 = element("div");
			t6 = text(/*chord*/ ctx[0]);
			attr(button0, "class", "synth-play");
			attr(div0, "class", "svelte-pfqxg5");
			attr(div1, "class", "svelte-pfqxg5");
		},
		m(target, anchor) {
			insert(target, button0, anchor);
			insert(target, t1, anchor);
			insert(target, button1, anchor);
			insert(target, t3, anchor);
			insert(target, div0, anchor);
			insert(target, t5, anchor);
			insert(target, div1, anchor);
			append(div1, t6);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*handleStart*/ ctx[1]),
					listen(button1, "click", /*handleStop*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*chord*/ 1) set_data(t6, /*chord*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button0);
			if (detaching) detach(t1);
			if (detaching) detach(button1);
			if (detaching) detach(t3);
			if (detaching) detach(div0);
			if (detaching) detach(t5);
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function getRandomInt(max) {
	return Math.floor(Math.random() * Math.floor(max));
}

function instance($$self, $$props, $$invalidate) {
	let { chord } = $$props;
	let { chordPlaying = false } = $$props;
	let { highNotePlaying = false } = $$props;
	let { midNotePlaying = false } = $$props;
	const dispatch = createEventDispatcher();
	let audioEnabled = false;
	const chordSynth = new Tone.PolySynth(Tone.MonoSynth).toDestination();

	chordSynth.set({
		detune: -1200,
		envelope: { attack: 0.3, release: 3 },
		filterEnvelope: { attack: 4, release: 3 },
		filter: { frequency: 0.1 },
		maxPolyphony: 3,
		oscillator: { type: "pwm" },
		volume: -20
	});

	const highNoteSynth = new Tone.PolySynth().toDestination();

	highNoteSynth.set({
		detune: 3600,
		envelope: { attack: 0.01, release: 0.5 },
		filterEnvelope: { attack: 0.5, release: 0.5 },
		filter: { frequency: 0.2 },
		oscillator: { type: "sine" },
		volume: -18
	});

	const midNoteSynth = new Tone.PolySynth().toDestination();

	midNoteSynth.set({
		envelope: { attack: 0.01, release: 0.4 },
		filterEnvelope: { attack: 0.01, release: 0.4 },
		filter: { frequency: 0.4 },
		oscillator: { type: "triangle" },
		volume: -5
	});

	function updateChordPlaying() {
		if (audioEnabled && chordPlaying === true) {
			chordSynth.triggerAttackRelease(chord, 3.5);
		}
	}

	function updateMidNotePlaying() {
		if (audioEnabled && midNotePlaying === true) {
			const midNote = chord[getRandomInt(chord.length)];
			midNoteSynth.triggerAttackRelease(midNote, 1);
		}

		setTimeout(
			() => {
				dispatch("updateMidNotePlaying", false);
			},
			100
		);
	}

	function updateHighNotePlaying() {
		if (audioEnabled && highNotePlaying === true) {
			const noteToPlay = chord[getRandomInt(chord.length)];
			highNoteSynth.triggerAttackRelease(noteToPlay, 0.2);
		}

		setTimeout(
			() => {
				dispatch("updateHighNotePlaying", false);
			},
			100
		);
	}

	function handleStart() {
		audioEnabled = true;
		dispatch("updateHighNotePlaying", false);
		dispatch("updateMidNotePlaying", false);
	}

	function handleStop() {
		audioEnabled = false;
	}

	onMount(() => {
		// attach a click listener to a play button
		document.querySelector(".synth-play").addEventListener("click", async () => {
			await Tone.start();
			console.log("audio is ready");
			audioEnabled = true;
		});
	});

	$$self.$$set = $$props => {
		if ("chord" in $$props) $$invalidate(0, chord = $$props.chord);
		if ("chordPlaying" in $$props) $$invalidate(3, chordPlaying = $$props.chordPlaying);
		if ("highNotePlaying" in $$props) $$invalidate(4, highNotePlaying = $$props.highNotePlaying);
		if ("midNotePlaying" in $$props) $$invalidate(5, midNotePlaying = $$props.midNotePlaying);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*highNotePlaying*/ 16) {
			$: updateHighNotePlaying(highNotePlaying);
		}

		if ($$self.$$.dirty & /*midNotePlaying*/ 32) {
			$: updateMidNotePlaying(midNotePlaying);
		}

		if ($$self.$$.dirty & /*chordPlaying*/ 8) {
			$: updateChordPlaying(chordPlaying);
		}
	};

	return [chord, handleStart, handleStop, chordPlaying, highNotePlaying, midNotePlaying];
}

class Synth extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			chord: 0,
			chordPlaying: 3,
			highNotePlaying: 4,
			midNotePlaying: 5
		});
	}
}

export default Synth;