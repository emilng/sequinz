import './SeqSettings.css.proxy.js';
/* src/sequencergrid/SeqSettings.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { createEventDispatcher } from "../../web_modules/svelte.js";
import SeqScaleSettings from "./SeqScaleSettings.js";
import SeqKeySettings from "./SeqKeySettings.js";

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let t1;
	let t2;
	let t3;
	let seqkeysettings;
	let t4;
	let seqscalesettings;
	let t5;
	let div1;
	let button0;
	let t7;
	let button1;
	let current;
	let mounted;
	let dispose;
	seqkeysettings = new SeqKeySettings({});
	seqkeysettings.$on("update", /*updateKey*/ ctx[3]);
	seqscalesettings = new SeqScaleSettings({});
	seqscalesettings.$on("update", /*updateScale*/ ctx[2]);

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t0 = text(/*key*/ ctx[0]);
			t1 = space();
			t2 = text(/*scale*/ ctx[1]);
			t3 = space();
			create_component(seqkeysettings.$$.fragment);
			t4 = space();
			create_component(seqscalesettings.$$.fragment);
			t5 = space();
			div1 = element("div");
			button0 = element("button");
			button0.textContent = "Populate grid";
			t7 = space();
			button1 = element("button");
			button1.textContent = "Clear pattern";
			attr(div2, "class", "settings-container svelte-aeczi0");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(div2, t3);
			mount_component(seqkeysettings, div2, null);
			append(div2, t4);
			mount_component(seqscalesettings, div2, null);
			append(div2, t5);
			append(div2, div1);
			append(div1, button0);
			append(div1, t7);
			append(div1, button1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*populateGrid*/ ctx[4]),
					listen(button1, "click", /*clearPattern*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*key*/ 1) set_data(t0, /*key*/ ctx[0]);
			if (!current || dirty & /*scale*/ 2) set_data(t2, /*scale*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(seqkeysettings.$$.fragment, local);
			transition_in(seqscalesettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(seqkeysettings.$$.fragment, local);
			transition_out(seqscalesettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(seqkeysettings);
			destroy_component(seqscalesettings);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	let { settings = {
		division: 32,
		key: "C",
		octave: 3,
		scale: "ionian"
	} } = $$props;

	let key, scale;

	function updateSettings() {
		dispatch("update", settings);
	}

	function updateScale(event) {
		$$invalidate(6, settings = { ...settings, scale: event.detail });
		updateSettings();
	}

	function updateKey(event) {
		$$invalidate(6, settings = { ...settings, key: event.detail });
		updateSettings();
	}

	function populateGrid(event) {
		dispatch("populateGrid");
	}

	function clearPattern(event) {
		dispatch("clearPattern");
	}

	$$self.$$set = $$props => {
		if ("settings" in $$props) $$invalidate(6, settings = $$props.settings);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*settings*/ 64) {
			$: $$invalidate(0, { key, scale } = settings, key, ($$invalidate(1, scale), $$invalidate(6, settings)));
		}
	};

	return [key, scale, updateScale, updateKey, populateGrid, clearPattern, settings];
}

class SeqSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { settings: 6 });
	}
}

export default SeqSettings;