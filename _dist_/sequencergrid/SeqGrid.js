import './SeqGrid.css.proxy.js';
/* src/sequencergrid/SeqGrid.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	globals,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

const { window: window_1 } = globals;
import { createEventDispatcher, onMount } from "../../web_modules/svelte.js";
import { Scale } from "../../web_modules/@tonaljs/tonal.js";
import SeqSettings from "./SeqSettings.js";
import SeqRowLabels from "./SeqRowLabels.js";
import SeqNotes, { addNote, deleteNote, updateNotes } from "./SeqNotes.js";
import SeqGridLines from "./SeqGridLines.js";

function create_fragment(ctx) {
	let seqsettings;
	let t0;
	let div1;
	let seqrowlabels;
	let t1;
	let div0;
	let seqgridlines;
	let t2;
	let seqnotes;
	let current;
	let mounted;
	let dispose;
	seqsettings = new SeqSettings({ props: { settings: /*settings*/ ctx[0] } });
	seqsettings.$on("update", /*updateSettings*/ ctx[5]);
	seqsettings.$on("populateGrid", /*handlePopulateGrid*/ ctx[8]);
	seqsettings.$on("clearPattern", /*handleClearPattern*/ ctx[9]);
	seqrowlabels = new SeqRowLabels({ props: { labels: /*rowLabels*/ ctx[2] } });

	seqgridlines = new SeqGridLines({
			props: { settings: /*dimensions*/ ctx[1] }
		});

	seqgridlines.$on("addNote", /*handleAddNote*/ ctx[6]);
	seqnotes = new SeqNotes({ props: { notes: /*notes*/ ctx[3] } });
	seqnotes.$on("deleteNote", /*handleDeleteNote*/ ctx[7]);

	return {
		c() {
			create_component(seqsettings.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(seqrowlabels.$$.fragment);
			t1 = space();
			div0 = element("div");
			create_component(seqgridlines.$$.fragment);
			t2 = space();
			create_component(seqnotes.$$.fragment);
			attr(div0, "class", "grid-canvas svelte-rn6lng");
			attr(div1, "class", "grid-container svelte-rn6lng");
		},
		m(target, anchor) {
			mount_component(seqsettings, target, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			mount_component(seqrowlabels, div1, null);
			append(div1, t1);
			append(div1, div0);
			mount_component(seqgridlines, div0, null);
			append(div0, t2);
			mount_component(seqnotes, div0, null);
			current = true;

			if (!mounted) {
				dispose = listen(window_1, "resize", /*updateGrid*/ ctx[4], { passive: true });
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const seqsettings_changes = {};
			if (dirty & /*settings*/ 1) seqsettings_changes.settings = /*settings*/ ctx[0];
			seqsettings.$set(seqsettings_changes);
			const seqrowlabels_changes = {};
			if (dirty & /*rowLabels*/ 4) seqrowlabels_changes.labels = /*rowLabels*/ ctx[2];
			seqrowlabels.$set(seqrowlabels_changes);
			const seqgridlines_changes = {};
			if (dirty & /*dimensions*/ 2) seqgridlines_changes.settings = /*dimensions*/ ctx[1];
			seqgridlines.$set(seqgridlines_changes);
			const seqnotes_changes = {};
			if (dirty & /*notes*/ 8) seqnotes_changes.notes = /*notes*/ ctx[3];
			seqnotes.$set(seqnotes_changes);
		},
		i(local) {
			if (current) return;
			transition_in(seqsettings.$$.fragment, local);
			transition_in(seqrowlabels.$$.fragment, local);
			transition_in(seqgridlines.$$.fragment, local);
			transition_in(seqnotes.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(seqsettings.$$.fragment, local);
			transition_out(seqrowlabels.$$.fragment, local);
			transition_out(seqgridlines.$$.fragment, local);
			transition_out(seqnotes.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(seqsettings, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			destroy_component(seqrowlabels);
			destroy_component(seqgridlines);
			destroy_component(seqnotes);
			mounted = false;
			dispose();
		}
	};
}

function getRandomInt(max) {
	return Math.floor(Math.random() * Math.floor(max));
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	let settings = {
		division: 32,
		key: "C",
		octave: 3,
		scale: "ionian"
	};

	let dimensions = {
		rowHeight: 24,
		pixelRatio: window.devicePixelRatio
	};

	let rowLabels = getScaleNotes(settings);
	let notes = [];
	let noteData = {};

	function updateNoteData() {
		noteData = {};

		notes.forEach(noteObj => {
			if (noteObj.column in noteData === false) {
				noteData[noteObj.column] = [];
			}

			noteData[noteObj.column].push(rowLabels[noteObj.row]);
		});

		dispatch("update", noteData);
	}

	function getScaleNotes({ key, octave, scale }) {
		const range = Scale.rangeOf(`${key} ${scale}`);
		return range(`${key}${octave}`, `${key}${octave + 1}`);
	}

	function updateDimensions() {
		const width = window.innerWidth - 96;
		const height = dimensions.rowHeight * rowLabels.length;

		$$invalidate(1, dimensions = {
			...dimensions,
			width,
			height,
			columnWidth: width / settings.division,
			rows: rowLabels.length,
			columns: settings.division
		});
	}

	function updateGrid() {
		updateDimensions();
		$$invalidate(3, notes = updateNotes(notes, dimensions));
	}

	function updateSettings(event) {
		$$invalidate(0, settings = event.detail);
		$$invalidate(2, rowLabels = getScaleNotes(settings));
		updateGrid();
		updateNoteData();
	}

	function handleAddNote(event) {
		const { clickX, clickY } = event.detail;
		$$invalidate(3, notes = addNote(notes, dimensions, clickX, clickY));
		updateNoteData();
	}

	function handleDeleteNote(event) {
		$$invalidate(3, notes = deleteNote(notes, event.detail));
		updateNoteData();
	}

	function handlePopulateGrid() {
		$$invalidate(3, notes = []);

		for (let i = 0; i < settings.division; i += 1) {
			const startTriad = getRandomInt(4);
			const clickX = i * dimensions.columnWidth;

			for (let j = 0; j < 5; j += 2) {
				const clickY = (startTriad + j) * dimensions.rowHeight;
				$$invalidate(3, notes = addNote(notes, dimensions, clickX, clickY));
			}
		}

		updateNoteData();
	}

	function handleClearPattern() {
		$$invalidate(3, notes = []);
		updateNoteData();
	}

	onMount(() => {
		updateGrid();
		handlePopulateGrid();
	});

	return [
		settings,
		dimensions,
		rowLabels,
		notes,
		updateGrid,
		updateSettings,
		handleAddNote,
		handleDeleteNote,
		handlePopulateGrid,
		handleClearPattern
	];
}

class SeqGrid extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default SeqGrid;