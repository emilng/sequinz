/* src/sequencergrid/SeqGridLines.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_style
} from "../../web_modules/svelte/internal.js";

import { onMount } from "../../web_modules/svelte.js";
import { createEventDispatcher } from "../../web_modules/svelte.js";

function create_fragment(ctx) {
	let canvas_1;
	let mounted;
	let dispose;

	return {
		c() {
			canvas_1 = element("canvas");
			set_style(canvas_1, "width", /*settings*/ ctx[0].width + "px");
			set_style(canvas_1, "height", /*settings*/ ctx[0].height + "px");
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[3](canvas_1);

			if (!mounted) {
				dispose = listen(canvas_1, "click", /*addNote*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*settings*/ 1) {
				set_style(canvas_1, "width", /*settings*/ ctx[0].width + "px");
			}

			if (dirty & /*settings*/ 1) {
				set_style(canvas_1, "height", /*settings*/ ctx[0].height + "px");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(canvas_1);
			/*canvas_1_binding*/ ctx[3](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { settings } = $$props;
	let canvas;
	let ctx;

	function addNote(event) {
		dispatch("addNote", {
			clickX: event.offsetX,
			clickY: event.offsetY
		});
	}

	function drawLine(startX, startY, endX, endY) {
		ctx.beginPath();
		ctx.moveTo(startX, startY);
		ctx.lineTo(endX, endY);
		ctx.stroke();
		ctx.closePath();
	}

	function drawGrid(settings) {
		if (!settings || !canvas) return;
		const { width, height, columnWidth, pixelRatio, rows, columns, rowHeight } = settings;
		$$invalidate(1, canvas.width = width * pixelRatio, canvas);
		$$invalidate(1, canvas.height = height * pixelRatio, canvas);
		const drawWidth = width * pixelRatio;
		const drawHeight = height * pixelRatio;
		ctx.clearRect(0, 0, drawWidth, drawHeight);

		// draw rows
		for (let i = 0; i <= rows; i += 1) {
			const yPos = i * rowHeight * pixelRatio;
			drawLine(0, yPos, drawWidth, yPos);
		}

		// draw columns
		for (let i = 0; i <= columns; i += 1) {
			const xPos = i * columnWidth * pixelRatio;
			drawLine(xPos, 0, xPos, drawHeight);
		}

		// draw quarter divisions
		ctx.save();

		ctx.lineWidth = 2;
		ctx.strokeStyle = "#111";

		for (let i = 0; i < 8; i += 1) {
			const quarterWidth = width / 8;
			const xPos = i * quarterWidth * pixelRatio;
			drawLine(xPos, 0, xPos, drawHeight);
		}

		ctx.restore();
	}

	onMount(() => {
		ctx = canvas.getContext("2d");
		ctx.imageSmoothingEnabled = false;
		ctx.lineWidth = 1;
		ctx.strokeStyle = "#333";
		dispatch("updateGrid");
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(1, canvas);
		});
	}

	$$self.$$set = $$props => {
		if ("settings" in $$props) $$invalidate(0, settings = $$props.settings);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*settings*/ 1) {
			$: drawGrid(settings);
		}
	};

	return [settings, canvas, addNote, canvas_1_binding];
}

class SeqGridLines extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { settings: 0 });
	}
}

export default SeqGridLines;