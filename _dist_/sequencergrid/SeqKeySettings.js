import './SeqKeySettings.css.proxy.js';
/* src/sequencergrid/SeqKeySettings.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	text
} from "../../web_modules/svelte/internal.js";

import { Note, Scale } from "../../web_modules/@tonaljs/tonal.js";
import { createEventDispatcher } from "../../web_modules/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (37:1) {#each keys as key}
function create_each_block(ctx) {
	let button;
	let t_value = /*key*/ ctx[4].display + "";
	let t;
	let button_data_value_value;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t = text(t_value);
			attr(button, "data-value", button_data_value_value = /*key*/ ctx[4].value);
			attr(button, "class", "svelte-1tghqhn");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", /*handleClick*/ ctx[1]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_value = /*keys*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*keys, handleClick*/ 3) {
				each_value = /*keys*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self) {
	const dispatch = createEventDispatcher();

	const getNoteDisplay = note => {
		const enharmonic = Note.enharmonic(note);

		if (note === enharmonic) {
			return note;
		} else if (note === "G#" || note === "Ab") {
			return "G#/Ab";
		} else {
			return [note, enharmonic].sort().join("/");
		}
	};

	const keys = Scale.get("C chromatic").notes.map(note => {
		return {
			display: getNoteDisplay(note),
			value: note
		};
	});

	function handleClick(event) {
		dispatch("update", event.target.getAttribute("data-value"));
	}

	return [keys, handleClick];
}

class SeqKeySettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default SeqKeySettings;